/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./cspy_types');
import DkNotifyConstant = ttypes.DkNotifyConstant
import DkCoreStatusConstants = ttypes.DkCoreStatusConstants
import DkLoggingCategoryConstant = ttypes.DkLoggingCategoryConstant
import BasicExprType = ttypes.BasicExprType
import DEBUGGER_SERVICE = ttypes.DEBUGGER_SERVICE
import DEBUGEVENT_SERVICE = ttypes.DEBUGEVENT_SERVICE
import CONTEXT_MANAGER_SERVICE = ttypes.CONTEXT_MANAGER_SERVICE
import MEMORY_SERVICE = ttypes.MEMORY_SERVICE
import SessionConfiguration = ttypes.SessionConfiguration
import DebugEvent = ttypes.DebugEvent
import InspectionContextChangedEvent = ttypes.InspectionContextChangedEvent
import BaseContextChangedEvent = ttypes.BaseContextChangedEvent
import LogEvent = ttypes.LogEvent
import Thread = ttypes.Thread
import ExprValue = ttypes.ExprValue
import ModuleData = ttypes.ModuleData
import NamedLocationMask = ttypes.NamedLocationMask
import NamedLocation = ttypes.NamedLocation
import ExtraDebugFile = ttypes.ExtraDebugFile
import ModuleLoadingOptions = ttypes.ModuleLoadingOptions
import ResetStyles = ttypes.ResetStyles
import DebugSettings = ttypes.DebugSettings
import HeartbeatService = require('./HeartbeatService');

/**
 * Main C-SPY service.
 */
declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  getVersionString(): string;

  getVersionString(callback?: (error: void, response: string)=>void): void;

  startSession(sessionConfig: SessionConfiguration): void;

  startSession(sessionConfig: SessionConfiguration, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stopSession(): void;

  stopSession(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getDebugSettings(): DebugSettings;

  getDebugSettings(callback?: (error: shared_ttypes.CSpyException, response: DebugSettings)=>void): void;

  setDebugSettings(settings: DebugSettings): void;

  setDebugSettings(settings: DebugSettings, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  exit(): void;

  exit(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  isOnline(): boolean;

  isOnline(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  loadModule(filename: string): void;

  loadModule(filename: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  loadModuleWithOptions(filename: string, options: ModuleLoadingOptions): void;

  loadModuleWithOptions(filename: string, options: ModuleLoadingOptions, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  flashModule(boardFile: string, executable: string, arguments: string[], extraExecutables: string[]): void;

  flashModule(boardFile: string, executable: string, arguments: string[], extraExecutables: string[], callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getFlashPasses(boardFile: string): string[][];

  getFlashPasses(boardFile: string, callback?: (error: shared_ttypes.CSpyException, response: string[][])=>void): void;

  eraseFlash(boardFile: string, nPasses: boolean[]): void;

  eraseFlash(boardFile: string, nPasses: boolean[], callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getModules(): ModuleData[];

  getModules(callback?: (error: shared_ttypes.CSpyException, response: ModuleData[])=>void): void;

  loadMacroFile(macro: string): void;

  loadMacroFile(macro: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  unloadMacroFile(macro: string): void;

  unloadMacroFile(macro: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  runToULE(ule: string, allowSingleStep: boolean): void;

  runToULE(ule: string, allowSingleStep: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getMulticoreFlags(): Int64;

  getMulticoreFlags(callback?: (error: shared_ttypes.CSpyException, response: Int64)=>void): void;

  getThreadList(): Thread[];

  getThreadList(callback?: (error: shared_ttypes.CSpyException, response: Thread[])=>void): void;

  isActiveThread(t: Thread): boolean;

  isActiveThread(t: Thread, callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  evalExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], format: shared_ttypes.ExprFormat, prefix: boolean): ExprValue;

  evalExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], format: shared_ttypes.ExprFormat, prefix: boolean, callback?: (error: shared_ttypes.CSpyException, response: ExprValue)=>void): void;

  assignExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], rvalue: ExprValue): void;

  assignExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], rvalue: ExprValue, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getSubExpressionLabels(ref: shared_ttypes.ContextRef, rootExpr: string, subExprIndex: number[], startIndex: number, length: number, treatPointerAsArray: boolean): string[];

  getSubExpressionLabels(ref: shared_ttypes.ContextRef, rootExpr: string, subExprIndex: number[], startIndex: number, length: number, treatPointerAsArray: boolean, callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  getLocationNames(): string[];

  getLocationNames(callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  getLocationNamesInGroup(group: string): string[];

  getLocationNamesInGroup(group: string, callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  getRegisterGroups(): string[];

  getRegisterGroups(callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  getNamedLocation(name: string): NamedLocation;

  getNamedLocation(name: string, callback?: (error: shared_ttypes.CSpyException, response: NamedLocation)=>void): void;

  getCoreState(core: number): DkCoreStatusConstants;

  getCoreState(core: number, callback?: (error: shared_ttypes.CSpyException, response: DkCoreStatusConstants)=>void): void;

  getNumberOfCores(): number;

  getNumberOfCores(callback?: (error: shared_ttypes.CSpyException, response: number)=>void): void;

  getCoreDescription(core: number): string;

  getCoreDescription(core: number, callback?: (error: void, response: string)=>void): void;

  getCycleCounter(core: number): Int64;

  getCycleCounter(core: number, callback?: (error: shared_ttypes.CSpyException, response: Int64)=>void): void;

  getCyclesPerSecond(): Int64;

  getCyclesPerSecond(callback?: (error: shared_ttypes.CSpyException, response: Int64)=>void): void;

  hasCoreStoppedDeliberately(core: number): boolean;

  hasCoreStoppedDeliberately(core: number, callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  setResetStyles(id: number): void;

  setResetStyles(id: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getResetStyles(): ResetStyles[];

  getResetStyles(callback?: (error: shared_ttypes.CSpyException, response: ResetStyles[])=>void): void;

  reset(): void;

  reset(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  go(): void;

  go(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  goCore(core: number): void;

  goCore(core: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stop(): void;

  stop(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stopCore(core: number): void;

  stopCore(core: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  multiGo(core: number): void;

  multiGo(core: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  step(enterFunctionsWithoutSource: boolean): void;

  step(enterFunctionsWithoutSource: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stepOver(enterFunctionsWithoutSource: boolean): void;

  stepOver(enterFunctionsWithoutSource: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  nextStatement(enterFunctionsWithoutSource: boolean): void;

  nextStatement(enterFunctionsWithoutSource: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stepOut(): void;

  stepOut(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  instructionStep(): void;

  instructionStep(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  instructionStepOver(): void;

  instructionStepOver(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  goToLocation(location: shared_ttypes.Location): void;

  goToLocation(location: shared_ttypes.Location, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  goToLocations(locations: shared_ttypes.Location[]): void;

  goToLocations(locations: shared_ttypes.Location[], callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  supportsExceptions(): boolean;

  supportsExceptions(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  getBreakOnThrow(): boolean;

  getBreakOnThrow(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  setBreakOnThrow(enable: boolean): void;

  setBreakOnThrow(enable: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getBreakOnUncaughtException(): boolean;

  getBreakOnUncaughtException(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  setBreakOnUncaughtException(enable: boolean): void;

  setBreakOnUncaughtException(enable: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getZoneByName(name: string): shared_ttypes.ZoneInfo;

  getZoneByName(name: string, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.ZoneInfo)=>void): void;

  getZoneById(id: number): shared_ttypes.ZoneInfo;

  getZoneById(id: number, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.ZoneInfo)=>void): void;

  getAllZones(): shared_ttypes.ZoneInfo[];

  getAllZones(callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.ZoneInfo[])=>void): void;

  getTraceTime(): Int64;

  getTraceTime(callback?: (error: void, response: Int64)=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getVersionString(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_startSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stopSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getDebugSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setDebugSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_exit(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isOnline(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_loadModule(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_loadModuleWithOptions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_flashModule(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getFlashPasses(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_eraseFlash(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getModules(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_loadMacroFile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_unloadMacroFile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_runToULE(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getMulticoreFlags(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getThreadList(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isActiveThread(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_evalExpression(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_assignExpression(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getSubExpressionLabels(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getLocationNames(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getLocationNamesInGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getRegisterGroups(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getNamedLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCoreState(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getNumberOfCores(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCoreDescription(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCycleCounter(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCyclesPerSecond(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_hasCoreStoppedDeliberately(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setResetStyles(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getResetStyles(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_reset(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_go(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_goCore(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stop(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stopCore(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_multiGo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_step(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stepOver(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_nextStatement(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stepOut(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_instructionStep(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_instructionStepOver(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_goToLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_goToLocations(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_supportsExceptions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getBreakOnThrow(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setBreakOnThrow(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getBreakOnUncaughtException(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setBreakOnUncaughtException(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getZoneByName(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getZoneById(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAllZones(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getTraceTime(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
